// given an Array A, find the max value of sum of any contigious subarray from array A
Example Input
Input 1:

 A = [1, 2, 3, 4, -10] 
Input 2:

 A = [-2, 1, -3, 4, -1, 2, 1, -5, 4] 


Example Output
Output 1:

 10 
Output 2:

 6 
 
 Solution:
 Approach 1: Brute force
 use a loop over A to find each subarray of leangth 0-N and find sum of each subArray store in another DS.
 Find max of that and return.
 TC: O(n*n) if Prefix Sum is used, O(n*n*n) if Sum is being calculated
 Approach 2:
 Kadane's Algorithm:
 Loop
  calculate, running sum.
  Add every element Ai only if sum>0 and Ai is making it more psitive.
  If Ai makes it more negative, reset running sum= Ai
  ans = max(ans and runningSum[i])
 return ans;
 
 public int maxSubArray(final List<Integer> A) {
        int ans = Integer.MIN_VALUE;
        int sum = 0;
        for(int i = 0; i<A.size(); i++)
        {
            if(sum>0)
            {
                sum+=A.get(i);
            }
            else
            {
                sum = A.get(i);
            }
            ans = java.lang.Math.max(ans, sum);
        }
        return ans;
    }
 
