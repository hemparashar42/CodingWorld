Given a binary string A. It is allowed to do at most one swap between any 0 and 1. Find and return the length of the longest consecutive 1’s that can be achieved.


Input Format

The only argument given is string A.
Output Format

Return the length of the longest consecutive 1’s that can be achieved.
Constraints

1 <= length of string <= 1000000
A contains only characters 0 and 1.
For Example

Input 1:
    A = "111000"
Output 1:
    3

Input 2:
    A = "111011101"
Output 2:
    7
    
    Solution:
    
    public class Solution {
    public int solve(String A) {
        int n=A.length();
        //int l=0,r=0;
        int c=0;
        for(int i=0; i<n; i++)
        {
            c=c + Character.getNumericValue(A.charAt(i));
        }
        //System.out.println(c);
        if(c==n)
            return n; // number of consecutive 1s
        if(c==0)
            return 0;
        int ans=0;
        for(int i=0; i<n; i++)
        {
            if(A.charAt(i) == '0')
            {
                 int l=0,r=0;
                 //find consecutive 1's on left
                 for(int j=i-1; j>=0 ; j--)
                 {
                     if(A.charAt(j)=='1')
                     {
                         l++;
                     }
                     else
                        break;
                 }
                 // find consecutive 1s on right of zero
                 for(int j=i+1; j<n; j++)
                 {
                     if(A.charAt(j)=='1')
                     {
                         r++;
                     }
                     else
                        break;
                 }

                
                 if(l+r<c)
                    ans = (ans< (l+r+1)) ? l+r+1 : ans;
                else
                    ans = (ans < (l+r)) ? (l+r) : ans;
            }
            
        }
        return ans;
    }
}
